{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1VMOMSFlCGcJp8PuwrXkrSpVfzyUrkhxN","authorship_tag":"ABX9TyNNthES1oyV8ie4VW8Nn+uk"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install rtree shapely pandas openpyxl"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IOTwVWWh3ew5","executionInfo":{"status":"ok","timestamp":1753276957915,"user_tz":-180,"elapsed":13107,"user":{"displayName":"Vladimir","userId":"12041452336257983801"}},"outputId":"e8fc1997-f540-402e-f734-0911b291121b","collapsed":true},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting rtree\n","  Downloading rtree-1.4.0-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (2.1 kB)\n","Requirement already satisfied: shapely in /usr/local/lib/python3.11/dist-packages (2.1.1)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n","Requirement already satisfied: openpyxl in /usr/local/lib/python3.11/dist-packages (3.1.5)\n","Requirement already satisfied: numpy>=1.21 in /usr/local/lib/python3.11/dist-packages (from shapely) (2.0.2)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n","Requirement already satisfied: et-xmlfile in /usr/local/lib/python3.11/dist-packages (from openpyxl) (2.0.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n","Downloading rtree-1.4.0-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (541 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m541.1/541.1 kB\u001b[0m \u001b[31m9.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: rtree\n","Successfully installed rtree-1.4.0\n"]}]},{"cell_type":"code","execution_count":2,"metadata":{"id":"PGbG3e_5h8PR","executionInfo":{"status":"ok","timestamp":1753277027259,"user_tz":-180,"elapsed":28826,"user":{"displayName":"Vladimir","userId":"12041452336257983801"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"18bdaab6-004d-45d5-b6bc-23911593dc70"},"outputs":[{"output_type":"stream","name":"stdout","text":["Чтение файла...\n","Прочитано 93437 камер.\n","Создание R-дерева...\n","R-дерево создано.\n","Проверка пересечений...\n","Найдено 10836 пары пересекающихся камер.\n","Формирование групп пересекающихся камер...\n","Найдено 3279 групп пересекающихся камер.\n","Создание DataFrame...\n","Создан DataFrame с 11548 строками.\n","Запись данных в файл /content/drive/MyDrive/useful/intersections/Actual/intersecting_groups.xlsx...\n","Данные успешно записаны в файл /content/drive/MyDrive/useful/intersections/Actual/intersecting_groups.xlsx.\n","Запись данных в файл /content/drive/MyDrive/useful/intersections/Actual/intersecting_groups.json...\n","Данные успешно записаны в файл /content/drive/MyDrive/useful/intersections/Actual/intersecting_groups.json.\n"]}],"source":["import json\n","from shapely.geometry import Polygon\n","from rtree import index\n","import pandas as pd\n","\n","# Константы\n","AZIMUTH_DIFF_THRESHOLD = 15  # Разница азимутов в градусах\n","INTERSECTION_AREA_THRESHOLD = 0.1  # Процент площади пересечения от минимальной площади зоны обзора\n","\n","# Путь к исходному файлу\n","input_file_path = '/content/drive/MyDrive/useful/intersections/Actual/zones.json'\n","# Путь к выходному файлу XLSX\n","output_xlsx_path = '/content/drive/MyDrive/useful/intersections/Actual/intersecting_groups.xlsx'\n","# Путь к выходному файлу JSON\n","output_json_path = '/content/drive/MyDrive/useful/intersections/Actual/intersecting_groups.json'\n","\n","# Чтение файла\n","print(\"Чтение файла...\")\n","with open(input_file_path, 'r', encoding='utf-8') as file:\n","    cameras = json.load(file)\n","print(f\"Прочитано {len(cameras)} камер.\")\n","\n","# Функция для создания полигона из координат\n","def create_polygon(camera):\n","    lat1, lng1 = camera['lat_1'], camera['lng_1']\n","    lat2, lng2 = camera['lat_2'], camera['lng_2']\n","    lat, lng = camera['lat'], camera['lng']\n","    return Polygon([\n","        (lng, lat),\n","        (lng1, lat1),\n","        (lng2, lat2),\n","        (lng, lat)\n","    ])\n","\n","# Создание R-дерева\n","print(\"Создание R-дерева...\")\n","idx = index.Index()\n","\n","# Добавление полигонов камер в R-дерево\n","polygons = []\n","for i, camera in enumerate(cameras):\n","    polygon = create_polygon(camera)\n","    polygons.append(polygon)\n","    idx.insert(i, polygon.bounds)\n","print(\"R-дерево создано.\")\n","\n","# Функция для расчета площади пересечения\n","def intersection_area(polygon1, polygon2):\n","    intersection = polygon1.intersection(polygon2)\n","    return intersection.area\n","\n","# Список камер с пересекающимися зонами обзора\n","print(\"Проверка пересечений...\")\n","intersecting_pairs = []\n","\n","# Проверка пересечений с использованием R-дерева\n","for i, polygon in enumerate(polygons):\n","    # Поиск возможных пересечений\n","    possible_intersections = list(idx.intersection(polygon.bounds))\n","    for j in possible_intersections:\n","        if i != j:\n","            polygon2 = polygons[j]\n","            if polygon.intersects(polygon2):\n","                # Проверка разницы азимутов\n","                azimuth_diff = abs(cameras[i]['defaultAzimuth'] - cameras[j]['defaultAzimuth'])\n","                if azimuth_diff > 180:\n","                    azimuth_diff = 360 - azimuth_diff\n","                if azimuth_diff <= AZIMUTH_DIFF_THRESHOLD:\n","                    # Проверка площади пересечения\n","                    area1 = polygon.area\n","                    area2 = polygon2.area\n","                    intersection_area_value = intersection_area(polygon, polygon2)\n","                    if intersection_area_value >= INTERSECTION_AREA_THRESHOLD * min(area1, area2):\n","                        intersecting_pairs.append((i, j))\n","print(f\"Найдено {len(intersecting_pairs)} пары пересекающихся камер.\")\n","\n","# Формирование групп пересекающихся камер\n","from collections import defaultdict\n","\n","# Создаем граф для поиска связанных компонентов\n","graph = defaultdict(list)\n","for i, j in intersecting_pairs:\n","    graph[i].append(j)\n","    graph[j].append(i)\n","\n","# Функция для поиска связанных компонентов\n","def find_connected_components(graph):\n","    visited = set()\n","    components = []\n","\n","    def dfs(node, component):\n","        visited.add(node)\n","        component.append(node)\n","        for neighbor in graph[node]:\n","            if neighbor not in visited:\n","                dfs(neighbor, component)\n","\n","    for node in graph:\n","        if node not in visited:\n","            component = []\n","            dfs(node, component)\n","            components.append(component)\n","\n","    return components\n","\n","# Поиск связанных компонентов\n","print(\"Формирование групп пересекающихся камер...\")\n","connected_components = find_connected_components(graph)\n","print(f\"Найдено {len(connected_components)} групп пересекающихся камер.\")\n","\n","# Формирование данных для записи в XLSX\n","data = []\n","for component in connected_components:\n","    for i in component:\n","        for j in component:\n","            if i != j:\n","                polygon1 = polygons[i]\n","                polygon2 = polygons[j]\n","                intersection_area_value = intersection_area(polygon1, polygon2)\n","                area1 = polygon1.area\n","                area2 = polygon2.area\n","                intersection_percentage = (intersection_area_value / min(area1, area2)) * 100\n","                data.append({\n","                    'Camera1': cameras[i]['name'],\n","                    'Azimuth1': cameras[i]['defaultAzimuth'],\n","                    'Camera2': cameras[j]['name'],\n","                    'Azimuth2': cameras[j]['defaultAzimuth'],\n","                    'IntersectionPercentage': intersection_percentage\n","                })\n","\n","# Создание DataFrame\n","print(\"Создание DataFrame...\")\n","df = pd.DataFrame(data)\n","print(f\"Создан DataFrame с {len(df)} строками.\")\n","\n","# Запись данных в XLSX файл\n","print(f\"Запись данных в файл {output_xlsx_path}...\")\n","df.to_excel(output_xlsx_path, index=False)\n","print(f\"Данные успешно записаны в файл {output_xlsx_path}.\")\n","\n","# Формирование данных для записи в JSON\n","intersecting_cameras_set = set()\n","for component in connected_components:\n","    for i in component:\n","        intersecting_cameras_set.add(i)\n","\n","intersecting_groups_json = []\n","for i in intersecting_cameras_set:\n","    camera_info = {\n","        \"name\": cameras[i][\"name\"],\n","        \"lat\": cameras[i][\"lat\"],\n","        \"lng\": cameras[i][\"lng\"],\n","        \"district\": cameras[i][\"district\"],\n","        \"address\": cameras[i][\"address\"],\n","        \"cameraType\": cameras[i][\"cameraType\"],\n","        \"defaultAzimuth\": cameras[i][\"defaultAzimuth\"],\n","        \"lat_1\": cameras[i][\"lat_1\"],\n","        \"lng_1\": cameras[i][\"lng_1\"],\n","        \"lat_2\": cameras[i][\"lat_2\"],\n","        \"lng_2\": cameras[i][\"lng_2\"]\n","    }\n","    intersecting_groups_json.append(camera_info)\n","\n","# Запись данных в JSON файл\n","print(f\"Запись данных в файл {output_json_path}...\")\n","with open(output_json_path, 'w', encoding='utf-8') as file:\n","    json.dump(intersecting_groups_json, file, ensure_ascii=False, indent=4)\n","print(f\"Данные успешно записаны в файл {output_json_path}.\")"]}]}